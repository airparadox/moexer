import logging
import asyncio
import json
import argparse
from dotenv import load_dotenv

from models import Portfolio
from analyzers import PortfolioAnalyzer, RebalancingAnalyzer, AsyncPortfolioAnalyzer
from utils import (
    log_performance_summary,
    calculate_portfolio_value,
    get_performance_report,
)
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def load_portfolio_from_file(file_path: str) -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    with open(file_path, "r", encoding="utf-8") as f:
        return json.load(f)

def analyze_portfolio_improved(portfolio_dict: dict) -> dict:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    
    Args:
        portfolio_dict: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º {ticker: quantity}
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        portfolio = Portfolio.from_dict(portfolio_dict)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
        portfolio_analyzer = PortfolioAnalyzer()
        rebalancing_analyzer = RebalancingAnalyzer()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
        analysis_results = portfolio_analyzer.analyze_portfolio(portfolio)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ
        rebalancing_suggestions = rebalancing_analyzer.suggest_rebalancing(analysis_results)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É
        portfolio_summary = rebalancing_analyzer.get_portfolio_summary(analysis_results)

        total_value = calculate_portfolio_value(
            portfolio,
            portfolio_analyzer.moex_service.get_latest_price,
        )
        portfolio_summary["total_value"] = total_value
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        results = {
            "analysis_results": {},
            "rebalancing_suggestions": rebalancing_suggestions,
            "portfolio_summary": portfolio_summary
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        for ticker, result in analysis_results.items():
            results["analysis_results"][ticker] = {
                "quantity": next(pos.quantity for pos in portfolio.positions if pos.ticker == ticker),
                "recommendation": result.recommendation,
                "confidence": result.confidence,
                "decision": result.analysis_data.get("final_decision", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
                "details": {
                    "market_news": result.analysis_data.get("market_news", ""),
                    "company_news": result.analysis_data.get("semantic", ""),
                    "technical_analysis": result.analysis_data.get("moex_analysis", ""),
                    "financial_data": result.analysis_data.get("ifrs_data", "")
                }
            }
        
        return results
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        return {
            "error": str(e),
            "analysis_results": {},
            "rebalancing_suggestions": {},
            "portfolio_summary": {"error": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"}
        }


async def analyze_portfolio_async(portfolio_dict: dict) -> dict:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∏–∫–µ—Ä–æ–≤."""
    try:
        portfolio = Portfolio.from_dict(portfolio_dict)
        portfolio_analyzer = AsyncPortfolioAnalyzer()
        rebalancing_analyzer = RebalancingAnalyzer()

        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
        analysis_results = await portfolio_analyzer.analyze_portfolio_async(portfolio)

        rebalancing_suggestions = rebalancing_analyzer.suggest_rebalancing(analysis_results)
        portfolio_summary = rebalancing_analyzer.get_portfolio_summary(analysis_results)

        total_value = calculate_portfolio_value(
            portfolio,
            portfolio_analyzer.moex_service.get_latest_price,
        )
        portfolio_summary["total_value"] = total_value

        results = {
            "analysis_results": {},
            "rebalancing_suggestions": rebalancing_suggestions,
            "portfolio_summary": portfolio_summary,
        }

        for ticker, result in analysis_results.items():
            results["analysis_results"][ticker] = {
                "quantity": next(pos.quantity for pos in portfolio.positions if pos.ticker == ticker),
                "recommendation": result.recommendation,
                "confidence": result.confidence,
                "decision": result.analysis_data.get("final_decision", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
                "details": {
                    "market_news": result.analysis_data.get("market_news", ""),
                    "company_news": result.analysis_data.get("semantic", ""),
                    "technical_analysis": result.analysis_data.get("moex_analysis", ""),
                    "financial_data": result.analysis_data.get("ifrs_data", ""),
                },
            }

        return results

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        return {
            "error": str(e),
            "analysis_results": {},
            "rebalancing_suggestions": {},
            "portfolio_summary": {"error": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"},
        }

def print_analysis_results(results: dict):
    """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    if "error" in results:
        print(f"‚ùå –û—à–∏–±–∫–∞: {results['error']}")
        return
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é
    summary = results["portfolio_summary"]
    print("\n" + "="*60)
    print("üìä –°–í–û–î–ö–ê –ü–û –ü–û–†–¢–§–ï–õ–Æ")
    print("="*60)
    print(f"–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {summary['total_positions']}")
    print(f"–ö –ø–æ–∫—É–ø–∫–µ: {summary['buy_recommendations']}")
    print(f"–î–µ—Ä–∂–∞—Ç—å: {summary['hold_recommendations']}")
    print(f"–ö –ø—Ä–æ–¥–∞–∂–µ: {summary['sell_recommendations']}")
    print(f"–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {summary['average_confidence']:.2f}")
    print(f"–û–±—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {summary['portfolio_action']}")
    if 'total_value' in summary:
        print(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {summary['total_value']:.2f} —Ä—É–±.")
    
    # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–∫–µ—Ä—É
    print("\n" + "="*60)
    print("üìà –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –¢–ò–ö–ï–†–ê–ú")
    print("="*60)
    
    for ticker, data in results["analysis_results"].items():
        print(f"\nüè¢ {ticker}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {data['recommendation']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data['confidence']:.2f})")
        print(f"   –†–µ—à–µ–Ω–∏–µ: {data['decision']}...")
        print(f"   –†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: {results['rebalancing_suggestions'][ticker]}")


def generate_analysis_report(results: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞."""
    if "error" in results:
        return f"‚ùå –û—à–∏–±–∫–∞: {results['error']}"

    lines = []
    summary = results["portfolio_summary"]
    lines.append("=" * 60)
    lines.append("üìä –°–í–û–î–ö–ê –ü–û –ü–û–†–¢–§–ï–õ–Æ")
    lines.append("=" * 60)
    lines.append(f"–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {summary['total_positions']}")
    lines.append(f"–ö –ø–æ–∫—É–ø–∫–µ: {summary['buy_recommendations']}")
    lines.append(f"–î–µ—Ä–∂–∞—Ç—å: {summary['hold_recommendations']}")
    lines.append(f"–ö –ø—Ä–æ–¥–∞–∂–µ: {summary['sell_recommendations']}")
    lines.append(f"–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {summary['average_confidence']:.2f}")
    lines.append(f"–û–±—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {summary['portfolio_action']}")
    if "total_value" in summary:
        lines.append(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {summary['total_value']:.2f} —Ä—É–±.")

    lines.append("")
    lines.append("=" * 60)
    lines.append("üìà –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –¢–ò–ö–ï–†–ê–ú")
    lines.append("=" * 60)

    for ticker, data in results["analysis_results"].items():
        lines.append(f"\nüè¢ {ticker}")
        lines.append(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}")
        lines.append(
            f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {data['recommendation']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data['confidence']:.2f})"
        )
        lines.append(f"   –†–µ—à–µ–Ω–∏–µ: {data['decision']}...")
        lines.append(f"   –†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: {results['rebalancing_suggestions'][ticker]}")

    return "\n".join(lines)


def save_full_report(results: dict, start_time: datetime) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏ –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–∞–π–ª."""
    analysis_report = generate_analysis_report(results)
    performance_report = get_performance_report()
    full_report = (
        analysis_report
        + "\n\n=== –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===\n"
        + performance_report
    )

    os.makedirs("reports", exist_ok=True)
    file_name = start_time.strftime("report_%Y%m%d_%H%M%S.txt")
    path = os.path.join("reports", file_name)
    with open(path, "w", encoding="utf-8") as f:
        f.write(full_report)
    return path

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Portfolio analyzer")
    parser.add_argument(
        "-f",
        "--file",
        default="portfolio.json",
        help="–ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º",
    )
    args = parser.parse_args()

    start_time = datetime.now()

    try:
        portfolio_data = load_portfolio_from_file(args.file)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞: {e}")
        raise SystemExit(1)

    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è (async)...")
    print(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å: {portfolio_data}")

    results = asyncio.run(analyze_portfolio_async(portfolio_data))

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_analysis_results(results)

    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n" + "="*60)
    print("üìä –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("="*60)
    log_performance_summary()

    report_path = save_full_report(results, start_time)
    print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_path}")
